LOOPS

for (initialize ; condition ; unaryOperator){
    //body
}

1- initialize
2- condition --> true
3- body 
4- unaryOperator
5- condition --> true
6- body
7- unaryOperator
8- condition --> false
9- loop will stop

break;      -> once it is executed the nearest loop will stop running
continue;   -> once it is executed the nearest loop will skip the current iteration 

FUNCTIONS
1- We need to use the function keyword while creating the methods in js file
2- We do not need to provide data types when we give the parameter
    function sum (num1, num2){
        return num1 + num2;
    }

    console.log(sum(3 + 5));

3- If we do not return anything from function, we do NOT put void in definition 
    // c# 
        public void add(num1, num2){
        print.WriteLine(3,5);
        }
    // Java 
        public void add(num1, num2){
        system.out.println(3,5);
        }
    // JavaScript
        function add(num1, num2){
        console.log(num1+num2);
        }

4- If we return anything from function, we do NOT put the return type in definition
     // c# 
        public int add(num1, num2){
        return num1 + num2;
        }
    // Java 
        public int add(num1, num2){
        return num1 + num2;
        }
    // JavaScript
        function add(num1, num2){
        return num1 + num2
        }

------------------------------------------------------------------
Objects
1- We do not need to have classes to create an object in js
    test.js
        let person1 = {
            name: 'Mark',
            age: 10,
            multiple: function(a,b){
                return a*b;
            }
        }

classes
Classes are blueprints of the objects. Using classes, we can create multiple objects.

1- Classes starts with class keyword in js
2- We need to have the class name
3- We can only have one constructor inside the class
4- We cannot use function keyword to create the function in class

class Person{
    name,
    age
    
    constructor (name, age){
        this.name = name; //this.name -> class varible
        this.age = age; //this.age -> class variable
    }

    multiple(a,b){
        return a*b;
    }
}

let person1 = new Person("David", 16);
let person2 = new Person("Jessica", 19);
console.log(person1.multiple(a,b));
